// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // Output location relative to this schema file
  // output   = "../src/generated/prisma" // Default location is node_modules/.prisma/client
  // Define binary targets needed for deployment environment + local dev
  binaryTargets = ["native", "debian-openssl-3.0.x"] 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Conversation Model
// Represents a single chat session
model Conversation {
  id        String   @id @default(cuid()) // Unique ID for the conversation
  sessionId String   @unique              // Unique identifier from the widget session
  createdAt DateTime @default(now())      // Timestamp when the conversation started
  updatedAt DateTime @updatedAt          // Timestamp when the conversation was last updated
  messages  Message[]                    // Relation to messages in this conversation
  
  // Optional: Add fields like userId if implementing user identification
  // userId String?
}

// Message Model
// Represents a single message within a conversation
model Message {
  id             String       @id @default(cuid()) // Unique ID for the message
  createdAt      DateTime     @default(now())      // Timestamp when the message was sent
  sender         SenderType                        // Who sent the message (User, AI, System)
  text           String       @db.Text             // Content of the message
  conversationId String                            // Foreign key linking to the Conversation
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade) // Relation field
}

// Enum for Sender Type
enum SenderType {
  USER
  AI
  SYSTEM
}

// --- Add User Model --- 
model User {
  id            String    @id @default(cuid())
  username      String    @unique
  passwordHash  String    // Store the hashed password, not the plain text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Optional: Add roles or other user-related fields
} 